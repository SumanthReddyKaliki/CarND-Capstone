#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today
#+OPTIONS: ^:nil

#+TITLE: Workbook on Drive-by-Wire Node

* Requirement understanding

** Input
 - Input: /current_velocity
 - Input: /twist_cmd
 - input: /vehicle/dbw_enabled

/twist_cmd is the representation of the required the target linear and angular velocity.

** Output
 - Output: /vehicle/throttle_cmd
 - Output: /vehicle/steering_cmd
 - Output: /vehicle/brake_cmd

** Message Types

*** /current_velocity

    #+BEGIN_EXAMPLE
      $ rostopic info /current_velocity
      Type: geometry_msgs/TwistStamped

      Publishers:
       ,* /styx_server (http://yushen:44449/)

      Subscribers:
       ,* /pure_pursuit (http://yushen:45192/)

    #+END_EXAMPLE

*** /twist_cmd

*** geometry_msgs/TwistStamped

Both /current_velocity and /twist_cmd are of this message type.

Have both the linear and angular velocity in 3D.

#+BEGIN_EXAMPLE
  $ rosmsg info geometry_msgs/TwistStamped
  std_msgs/Header header
    uint32 seq
    time stamp
    string frame_id
  geometry_msgs/Twist twist
    geometry_msgs/Vector3 linear
      float64 x
      float64 y
      float64 z
    geometry_msgs/Vector3 angular
      float64 x
      float64 y
      float64 z

#+END_EXAMPLE

*** /vehicle/dbw_enabled

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/dbw_enabled
  Type: std_msgs/Bool

  Publishers:
   ,* /styx_server (http://yushen:44449/)

  Subscribers: None

#+END_EXAMPLE

#+BEGIN_EXAMPLE
  $ rostopic info /twist_cmd
  Type: geometry_msgs/TwistStamped

  Publishers:
   ,* /pure_pursuit (http://yushen:45192/)

  Subscribers: None

#+END_EXAMPLE

*** Bool

This is the type for /vehicle/dbw_enabled

#+BEGIN_EXAMPLE
  $ rosmsg info std_msgs/Bool
  bool data

#+END_EXAMPLE

*** /vehicle/throttle_cmd

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/throttle_cmd
  Type: dbw_mkz_msgs/ThrottleCmd

  Publishers:
   ,* /dbw_node (http://yushen:38983/)

  Subscribers:
   ,* /styx_server (http://yushen:44449/)

#+END_EXAMPLE

*** dbw_mkz_msgs/ThrottleCmd

    Where can I find more information on how to program dbw_mkz_msgs/ThrottleCmd?

    It seems that the pedal_cmd_type may have the value of the following:
    - CMD_NONE=0
    - CMD_PEDAL=1
    - CMD_PERCENT=2

    while pedal_cmd may have the actual command value for the mode of CMD_PERCENT, for example, the percent value.
    I'm not sure what would be meaning of the value for pedal_cmd in the mode of CMD_PEDAL, or CMD_NONE. I guess for the mode of CMD_NONE, there is no value needed.

#+BEGIN_EXAMPLE
  $ rosmsg info dbw_mkz_msgs/ThrottleCmd
  uint8 CMD_NONE=0
  uint8 CMD_PEDAL=1
  uint8 CMD_PERCENT=2
  float32 pedal_cmd
  uint8 pedal_cmd_type
  bool enable
  bool clear
  bool ignore
  uint8 count

#+END_EXAMPLE

*** /vehicle/steering_cmd

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/steering_cmd
  Type: dbw_mkz_msgs/SteeringCmd

  Publishers:
   ,* /dbw_node (http://yushen:38983/)

  Subscribers:
   ,* /styx_server (http://yushen:44449/)

#+END_EXAMPLE

*** dbw_mkz_msgs/SteeringCmd

How to program the values in the following fields?

- steering_wheel_angle_cmd might be the desired steering angle in radius
- steering_wheel_angle_velocity might be the velocity of the steering

how about the other fields?

#+BEGIN_EXAMPLE
  $ rosmsg info dbw_mkz_msgs/SteeringCmd
  float32 steering_wheel_angle_cmd
  float32 steering_wheel_angle_velocity
  bool enable
  bool clear
  bool ignore
  bool quiet
  uint8 count

#+END_EXAMPLE

*** /vehicle/brake_cmd

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/brake_cmd
  Type: dbw_mkz_msgs/BrakeCmd

  Publishers:
   ,* /dbw_node (http://yushen:38983/)

  Subscribers:
   ,* /styx_server (http://yushen:44449/)

#+END_EXAMPLE

*** dbw_mkz_msgs/BrakeCmd

This is similar to ThrottleCmd, but with some additional/different fields.

#+BEGIN_EXAMPLE
  $ rosmsg info dbw_mkz_msgs/BrakeCmd
  uint8 CMD_NONE=0
  uint8 CMD_PEDAL=1
  uint8 CMD_PERCENT=2
  uint8 CMD_TORQUE=3
  float32 TORQUE_BOO=520
  float32 TORQUE_MAX=3412
  float32 pedal_cmd
  uint8 pedal_cmd_type
  bool boo_cmd
  bool enable
  bool clear
  bool ignore
  uint8 count

#+END_EXAMPLE

* Source Code Decomposition and Assembly

  It's my practice of understanding source code and explain to myself and other readers.

  I'd decompose the source code into code blocks and them assemble then in terms of such blocks.
  This helps me to focus on each block,
  while getting the whole picture of what the overall program is doing.

#+NAME:dbw_node
#+BEGIN_SRC python :noweb tangle :tangle
  #!/usr/bin/env python

  import rospy
  from std_msgs.msg import Bool
  from dbw_mkz_msgs.msg import ThrottleCmd, SteeringCmd, BrakeCmd, SteeringReport
  from geometry_msgs.msg import TwistStamped
  import math

  from twist_controller import Controller

  '''
  You can build this node only after you have built (or partially built) the `waypoint_updater` node.

  You will subscribe to `/twist_cmd` message which provides the proposed linear and angular velocities.
  You can subscribe to any other message that you find important or refer to the document for list
  of messages subscribed to by the reference implementation of this node.

  One thing to keep in mind while building this node and the `twist_controller` class is the status
  of `dbw_enabled`. While in the simulator, its enabled all the time, in the real car, that will
  not be the case. This may cause your PID controller to accumulate error because the car could
  temporarily be driven by a human instead of your controller.

  We have provided two launch files with this node. Vehicle specific values (like vehicle_mass,
  wheel_base) etc should not be altered in these files.

  We have also provided some reference implementations for PID controller and other utility classes.
  You are free to use them or build your own.

  Once you have the proposed throttle, brake, and steer values, publish it on the various publishers
  that we have created in the `__init__` function.

  '''

  class DBWNode(object):
      def __init__(self):
          rospy.init_node('dbw_node')

          vehicle_mass = rospy.get_param('~vehicle_mass', 1736.35)
          fuel_capacity = rospy.get_param('~fuel_capacity', 13.5)
          brake_deadband = rospy.get_param('~brake_deadband', .1)
          decel_limit = rospy.get_param('~decel_limit', -5)
          accel_limit = rospy.get_param('~accel_limit', 1.)
          wheel_radius = rospy.get_param('~wheel_radius', 0.2413)
          wheel_base = rospy.get_param('~wheel_base', 2.8498)
          steer_ratio = rospy.get_param('~steer_ratio', 14.8)
          max_lat_accel = rospy.get_param('~max_lat_accel', 3.)
          max_steer_angle = rospy.get_param('~max_steer_angle', 8.)

          self.steer_pub = rospy.Publisher('/vehicle/steering_cmd',
                                           SteeringCmd, queue_size=1)
          self.throttle_pub = rospy.Publisher('/vehicle/throttle_cmd',
                                              ThrottleCmd, queue_size=1)
          self.brake_pub = rospy.Publisher('/vehicle/brake_cmd',
                                           BrakeCmd, queue_size=1)

          # TODO: Create `TwistController` object
          # self.controller = TwistController(<Arguments you wish to provide>)

          # TODO: Subscribe to all the topics you need to

          self.loop()

      def loop(self):
          rate = rospy.Rate(50) # 50Hz
          while not rospy.is_shutdown():
              # TODO: Get predicted throttle, brake, and steering using `twist_controller`
              # You should only publish the control commands if dbw is enabled
              # throttle, brake, steering = self.controller.control(<proposed linear velocity>,
              #                                                     <proposed angular velocity>,
              #                                                     <current linear velocity>,
              #                                                     <dbw status>,
              #                                                     <any other argument you need>)
              # if <dbw is enabled>:
              #   self.publish(throttle, brake, steer)
              rate.sleep()

      def publish(self, throttle, brake, steer):
          tcmd = ThrottleCmd()
          tcmd.enable = True
          tcmd.pedal_cmd_type = ThrottleCmd.CMD_PERCENT
          tcmd.pedal_cmd = throttle
          self.throttle_pub.publish(tcmd)

          scmd = SteeringCmd()
          scmd.enable = True
          scmd.steering_wheel_angle_cmd = steer
          self.steer_pub.publish(scmd)

          bcmd = BrakeCmd()
          bcmd.enable = True
          bcmd.pedal_cmd_type = BrakeCmd.CMD_TORQUE
          bcmd.pedal_cmd = brake
          self.brake_pub.publish(bcmd)


  if __name__ == '__main__':
      DBWNode()
#+END_SRC

* Some other interesting message

** /tf Traffic Light (message)?

   Based on the abbrevation and the subscriber, it might be related to traffic light.

   Still don't quite understand the meaning of the fields.
   #+BEGIN_EXAMPLE
     rostopic info /tf
     Type: tf2_msgs/TFMessage

     Publishers: None

     Subscribers:
     ,* /tl_detector (http://yushen:43555/)

   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     rosmsg info tf2_msgs/TFMessage
     geometry_msgs/TransformStamped[] transforms
       std_msgs/Header header
         uint32 seq
         time stamp
         string frame_id
       string child_frame_id
       geometry_msgs/Transform transform
         geometry_msgs/Vector3 translation
           float64 x
           float64 y
           float64 z
         geometry_msgs/Quaternion rotation
           float64 x
           float64 y
           float64 z
           float64 w

   #+END_EXAMPLE

** /tf_static

** /traffic_waypoint


* Quaternions

* TODO TODO

- Learn how to program dbw_mkz_msgs (ThrottleCmd, SteeringCmd, BrakeCmd)

- Browse, annotate and absorb the related code
