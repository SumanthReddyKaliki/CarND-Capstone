#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today
#+OPTIONS: ^:nil

#+TITLE: Workbook on Drive-by-Wire Node

* Requirement understanding

** Input
 - Input: /current_velocity
 - Input: /twist_cmd
 - input: /vehicle/dbw_enabled

/twist_cmd is the representation of the required the target linear and angular velocity.

** Output
 - Output: /vehicle/throttle_cmd
 - Output: /vehicle/steering_cmd
 - Output: /vehicle/brake_cmd

The requirement is to output the above commands so that the vehicle can drive correctly on the track,
based on its current speed, and the desired speed at the current waypoint, and the state of dbw_enabled.

** Message Types

*** /current_velocity

    #+BEGIN_EXAMPLE
      $ rostopic info /current_velocity
      Type: geometry_msgs/TwistStamped

      Publishers:
       ,* /styx_server (http://yushen:44449/)

      Subscribers:
       ,* /pure_pursuit (http://yushen:45192/)

    #+END_EXAMPLE

*** /twist_cmd
#+BEGIN_EXAMPLE
  $ rostopic info /twist_cmd
  Type: geometry_msgs/TwistStamped

  Publishers:
   ,* /pure_pursuit (http://yushen:45192/)

  Subscribers: None

#+END_EXAMPLE


*** geometry_msgs/TwistStamped

Both /current_velocity and /twist_cmd are of this message type.

Have both the linear and angular velocity in 3D.

#+BEGIN_EXAMPLE
  $ rosmsg info geometry_msgs/TwistStamped
  std_msgs/Header header
    uint32 seq
    time stamp
    string frame_id
  geometry_msgs/Twist twist
    geometry_msgs/Vector3 linear
      float64 x
      float64 y
      float64 z
    geometry_msgs/Vector3 angular
      float64 x
      float64 y
      float64 z

#+END_EXAMPLE

*** /vehicle/dbw_enabled

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/dbw_enabled
  Type: std_msgs/Bool

  Publishers:
   ,* /styx_server (http://yushen:44449/)

  Subscribers: None

#+END_EXAMPLE

*** Bool

This is the type for /vehicle/dbw_enabled

#+BEGIN_EXAMPLE
  $ rosmsg info std_msgs/Bool
  bool data

#+END_EXAMPLE

*** /vehicle/throttle_cmd

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/throttle_cmd
  Type: dbw_mkz_msgs/ThrottleCmd

  Publishers:
   ,* /dbw_node (http://yushen:38983/)

  Subscribers:
   ,* /styx_server (http://yushen:44449/)

#+END_EXAMPLE

*** dbw_mkz_msgs/ThrottleCmd

    Where can I find more information on how to program dbw_mkz_msgs/ThrottleCmd?

    In the provided source code of =dbw_node.py= there is a pubilsh method which encapsulates the code required to
    prepare proper messages of ThrottleCmd, SteeringCmd, and BrakeCmd. Therefore, there is no more need to answer the above question.

    It seems that the pedal_cmd_type may have the value of the following:
    - CMD_NONE=0
    - CMD_PEDAL=1
    - CMD_PERCENT=2

    while pedal_cmd may have the actual command value for the mode of CMD_PERCENT, for example, the percent value.
    I'm not sure what would be meaning of the value for pedal_cmd in the mode of CMD_PEDAL, or CMD_NONE. I guess for the mode of CMD_NONE, there is no value needed.

#+BEGIN_EXAMPLE
  $ rosmsg info dbw_mkz_msgs/ThrottleCmd
  uint8 CMD_NONE=0
  uint8 CMD_PEDAL=1
  uint8 CMD_PERCENT=2
  float32 pedal_cmd
  uint8 pedal_cmd_type
  bool enable
  bool clear
  bool ignore
  uint8 count

#+END_EXAMPLE

*** /vehicle/steering_cmd

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/steering_cmd
  Type: dbw_mkz_msgs/SteeringCmd

  Publishers:
   ,* /dbw_node (http://yushen:38983/)

  Subscribers:
   ,* /styx_server (http://yushen:44449/)

#+END_EXAMPLE

*** dbw_mkz_msgs/SteeringCmd

How to program the values in the following fields?

- steering_wheel_angle_cmd might be the desired steering angle in radius
- steering_wheel_angle_velocity might be the velocity of the steering

how about the other fields?

#+BEGIN_EXAMPLE
  $ rosmsg info dbw_mkz_msgs/SteeringCmd
  float32 steering_wheel_angle_cmd
  float32 steering_wheel_angle_velocity
  bool enable
  bool clear
  bool ignore
  bool quiet
  uint8 count

#+END_EXAMPLE

*** /vehicle/brake_cmd

#+BEGIN_EXAMPLE
  $ rostopic info /vehicle/brake_cmd
  Type: dbw_mkz_msgs/BrakeCmd

  Publishers:
   ,* /dbw_node (http://yushen:38983/)

  Subscribers:
   ,* /styx_server (http://yushen:44449/)

#+END_EXAMPLE

*** dbw_mkz_msgs/BrakeCmd

This is similar to ThrottleCmd, but with some additional/different fields.

#+BEGIN_EXAMPLE
  $ rosmsg info dbw_mkz_msgs/BrakeCmd
  uint8 CMD_NONE=0
  uint8 CMD_PEDAL=1
  uint8 CMD_PERCENT=2
  uint8 CMD_TORQUE=3
  float32 TORQUE_BOO=520
  float32 TORQUE_MAX=3412
  float32 pedal_cmd
  uint8 pedal_cmd_type
  bool boo_cmd
  bool enable
  bool clear
  bool ignore
  uint8 count

#+END_EXAMPLE


* TwistController

  This is the core of the control logic to produce control parameters to control the vehicle based
  on the inputs of the current velocity, the desired velocity, and the state of dbw_enabled state.

  The rest of the code just provides the communication and execution infrastructure.


* Source Code Decomposition and Assembly

  It's my practice of understanding and building source code and explain to myself and other readers.

  I'd decompose the source code into code blocks and them assemble then in terms of such blocks.
  This helps me to focus on each block,
  while getting the whole picture of what the overall program is doing.

** Top level assembly

   This assembly shows the architecture of the source code.

#+NAME:dbw_node
#+BEGIN_SRC python :noweb tangle :tangle ./ros/src/twist_controller/dbw_node.py
  <<preamble>>
  class DBWNode(object):
      def __init__(self):
          rospy.init_node('dbw_node')

          <<vehicle_parametres>>

          <<publishers>>

          # DONE: Create `TwistController` object
          self.controller = TwistController(
              wheel_base, vehicle_mass, steer_ratio*8, min_speed, max_lat_accel, max_steer_angle)
              # learn from the forum that the steer_ratio is too small from the Udacity default

          # DONE: Subscribe to all the topics you need to
          <<dbw_states>>
          <<subscribe_to_get_update>>

          self.loop()

      def loop(self):
          rate = rospy.Rate(50) # 50Hz
          while not rospy.is_shutdown():
              <<control_logic>>
              rate.sleep()

      <<callbacks>>

      def publish(self, throttle, brake, steer):
          <<publish>>

  if __name__ == '__main__':
      DBWNode()
#+END_SRC

** control_logic

In the context of loop and executed once a rate period, to determine the commands and pubilsh commands to vehicle.

#+NAME:control_logic
#+BEGIN_SRC python :noweb tangle :tangle
  # TODO: Get predicted throttle, brake, and steering using `twist_controller`
  # You should only publish the control commands if dbw is enabled
  if self.desired_velocity is None or self.current_velocity is None:
    pass
  else:
    desired_linear_velocity = self.desired_velocity.linear.x
    desired_angula_velocity = self.desired_velocity.angula.z
    current_linear_velocity = self.current_velocity.linear.x

    throttle, brake, steering = self.controller.control(
      desired_linear_velocity, desired_angular_velocity, current_linear_velocity)
    if self.dbw_enabled:
      self.publish(throttle, brake, steer)
    # end of self.dbw_enabled
  # end of self.desired_velocity is None or self.current_velocity is None
 #+END_SRC

** twist_controller

Based on the current velocity, and the desired velocity in both linear and angular, compute their delta, then use PID to control.

There is a PID implementation, but the parameters of P, I, D needs to be determined. I'm guessing the parameters for now.

For the steering, it seems that the implementation of YawController can be used as is.

The lowpass filter is an average mechanism. I'm not where to use it. With the input of the inputs of
the current and the desired velocity, or the output of the throttle, steering, and brake?
I'm using to smooth the current linear velocity for now.


#+NAME:twist_controller
#+BEGIN_SRC python :noweb tangle :tangle ./ros/src/twist_controller/twist_controller.py
  from pid import PID
  from yaw_controller import YawController
  from lowpass import LowPassFilter
  import time

  GAS_DENSITY = 2.858
  ONE_MPH = 0.44704               # 1 miles/hour in meters/second
  MAX_SPEED_metersps = 35.0 * ONE_MPH  # MPH in meters/second

  class TwistController(object):
      def __init__(self, wheel_base, vehicle_mass, steer_ratio, min_speed, max_lat_accel, max_steer_angle):
      #def __init__(self, *args, **kwargs):
          # TODO: Implement
          self.throttle_controller = PID(2.7, 0.01, 0.02, mn=0.0, mx=1.0)
          self.yaw_controller = YawController(
              wheel_base, steer_ratio, min_speed, max_lat_accel, max_steer_angle)
          self.lowpass_filter = LowPassFilter(0.7, 1.0)
          self.prev_time = None
          self.brake_coefficient = 10.0

      def control(self, desired_linear_velocity, desired_angular_velocity, current_linear_velocity):
      #def control(self, *args, **kwargs):
          # TODO: Change the arg, kwarg list to suit your needs
          # Return throttle, brake, steer
          if self.prev_time is None:
              self.prev_time = time.time()
              return 0., 0., 0.

          smoothed_current_linear_velocity = lowpass_filter.filt(desired_angular_velocity)
          desired_linear_velocity_modulated = min(
              MAX_SPEED_metersps, smoothed_current_linear_velocity)

          error_linear_velocity = (desired_linear_velocity_modulated -
                                   current_linear_velocity)
          if error_linear_velocity < 0: # need to deceleration
              brake = self.brake(error_linear_velocity, current_linear_velocity, vehicle_mass)
              throttle = 0
          else:
              elapsed_time = time.time() - self.prev_time
              throttle = self.throttle_controller.step(error_linear_velocity, elapsed_time)
              throttle = max(min(throttle, 1.0), 0.0)
              brake = 0.
          # end of if error_linear_velocity < 0

          steer = self.yaw_controller.get_steering(
              desired_linear_velocity, desired_angular_velocity, smoothed_current_linear_velocity)
          self.prev_time = time.time()
          return throttle, brake, steer

      def brake(error_in_linear_velocity, current_linear_velocity, vehicle_mass):
          # might be more fine tuned, might consider vehicle's mass, and the current velocity, etc.
          # might use another PID.
          brake_v = -self.brake_coefficient * error_in_linear_velocity  # assume the brake_v should be positive
          return max(brake_v, 1.0)
#+END_SRC

*** Some more leads on twist controller design

    Need to digest further the below info.

 Based on communication from the Slack channel #system-integration:
 #+BEGIN_EXAMPLE
   C S [2 months ago]
   @ddigges @wsteiner This worked for me: pass the yaw from twist_cmd through a low-pass filter and then into the provided YawController, except that when creating the YawController you need to multiply the provided steer_ratio by 8 or so.  And if you are want to go fast, you need to increase max_lat_accel accordingly.  In general, this gives a nice, non-nausea-inducing result.  The problem is that at high speeds, twist_cmd steers the way a racing car would, drifting into the inside lane in order to reduce lateral forces.  But it is, um, mostly ok at 40 mph.
 #+END_EXAMPLE

 Here is some discussion on the controller:

 #+BEGIN_EXAMPLE
   1, the unit transformation is automatically done by Udacity project default.
   2, the difference between current velocity and designed velocity should be input to PID and will output throttle as percent.  This is project default solution.  I give up pid control since it is not easy to tune for carla.
   3,  the brake default unit is Nm. you need calcuate it with: Brake torque = (vehicle_mass + fuel_capacity * GAS_DENSITY) * deceleration * wheel_radius

   https://github.com/xfqbuaa/Cargo-CarND-Capstone
 #+END_EXAMPLE
 It seems that for steering, no PID needed, but need to "multiply the provided steer_ratio by 8 or so".

 Here is another piece on the solution (https://discussions.udacity.com/t/solved-compute-cte-without-car-position/364383/6) :
 #+BEGIN_EXAMPLE
   That isn’t quite right. The CTE is the difference between the car’s actual position, and the position where the car should have been at that time. In other words, it is the distance between the car and the desired path. So to calculate the CTE, you need the car’s current position, and then you need to do a geometrical calculation to find the distance to the linear path interpolated along the waypoints.

   However, I have had success using a completely different approach. The twist_cmd topic is generated by a fancy piece of software called pure_pursuit, which is in the waypoint_follower directory. pure_pursuit uses the current car position, and the waypoints, to calculate the yaw angle that the car needs to follow in order to get onto, and to stay on, the desired path (the waypoint path). This yaw angle is published in the twist_cmd topic. Then another piece of software, twist_controller/yaw_controller.py, converts the yaw angle to a steering setting that you can send to the vehicle. No need for you to compute the CTE yourself, nor to write a PID controller.

   So you can do this in dbw_node.py: extract the yaw angle from twist_cmd, put it through a low-pass filter (because it may be a bit jittery), put that through yaw_controller, and publish the result (the steering value) in the “loop” section of dbw_node.py. But one thing to be aware of, that I learned through trial and error. When you set up YawController, you need to pass it several parameters that have been provided by Udacity. But the Udacity steer_ratio is too low; you need to multiply it by a factor of 8. But then it works pretty well.

   Note that this is just for steering control; you need to follow a different process (probably with a PID controller) to control the velocity. For testing, however, you can just publish a constant throttle value; 0.5 makes the car go about 40 mph, at least on my machine.

   Also: before you do anything else, search the Slack channel for everything by Alexey Makurin. His set of simple parameter changes: https://github.com/amakurin/CarND-Capstone/commit/9809bc60d51c06174f8c8bfe6c40c88ec1c39d5043 will improve the performance of your code immensely.

 #+END_EXAMPLE

** subscribe_to_get_update

In the context of __init__, subscribe to message to get needed updates.

#+NAME:subscribe_to_get_update
#+BEGIN_SRC python :noweb tangle :tangle
  rospy.Subscriber('/current_velocity', TwistStamped, self.current_velocity_cb)
  rospy.Subscriber('/twist_cmd', TwistStamped, self.twist_cmd_cb)
  rospy.Subscriber('/vehicle/dbw_enabled', Bool, self.dbw_enabled_cb)
#+END_SRC


** dbw_states

   In the context of __init__, declared the initial values of the states required for dbw control.

#+NAME:dbw_states
#+BEGIN_SRC python :noweb tangle :tangle
  self.dbw_enabled = False
  self.current_velocity = None
  self.desired_velocity = None
#+END_SRC

** callbacks

In the context of __init__, defines the callback functions for the subscription processing.

#+NAME:callbacks
#+BEGIN_SRC python :noweb tangle :tangle
  def current_velocity_cb(self, msg):
      self.current_velocity = msg.twist

  def twist_cmd_cb(self, msg):
      self.desired_velocity = msg.twist

  def dbw_enabled_cb(self, msg):
      self.dbw_enabled = msg.data
#+END_SRC

** publish

   In the context of publish function, perform the message fabrications and the acts of publishing.

#+NAME:publish
#+BEGIN_SRC python :noweb tangle :tangle
  tcmd = ThrottleCmd()
  tcmd.enable = True
  tcmd.pedal_cmd_type = ThrottleCmd.CMD_PERCENT
  tcmd.pedal_cmd = throttle
  self.throttle_pub.publish(tcmd)

  scmd = SteeringCmd()
  scmd.enable = True
  scmd.steering_wheel_angle_cmd = steer
  self.steer_pub.publish(scmd)

  bcmd = BrakeCmd()
  bcmd.enable = True
  bcmd.pedal_cmd_type = BrakeCmd.CMD_TORQUE
  bcmd.pedal_cmd = brake
  self.brake_pub.publish(bcmd)
#+END_SRC

** publishers

In the context of __init__, creates the needed publishers.

#+NAME:publishers
#+BEGIN_SRC python :noweb tangle :tangle
  self.steer_pub = rospy.Publisher('/vehicle/steering_cmd',
                                   SteeringCmd, queue_size=1)
  self.throttle_pub = rospy.Publisher('/vehicle/throttle_cmd',
                                      ThrottleCmd, queue_size=1)
  self.brake_pub = rospy.Publisher('/vehicle/brake_cmd',
                                   BrakeCmd, queue_size=1)


#+END_SRC

** vehicle_parameters

In the context of __init__, retrieve parameters of vehicle with default provision.
The parameters might be needed for vehicle commands.

#+NAME:vehicle_parametres
#+BEGIN_SRC python :noweb tangle :tangle
  vehicle_mass = rospy.get_param('~vehicle_mass', 1736.35)
  fuel_capacity = rospy.get_param('~fuel_capacity', 13.5)
  brake_deadband = rospy.get_param('~brake_deadband', .1)
  decel_limit = rospy.get_param('~decel_limit', -5)
  accel_limit = rospy.get_param('~accel_limit', 1.)
  wheel_radius = rospy.get_param('~wheel_radius', 0.2413)
  wheel_base = rospy.get_param('~wheel_base', 2.8498)
  steer_ratio = rospy.get_param('~steer_ratio', 14.8)
  max_lat_accel = rospy.get_param('~max_lat_accel', 3.)
  max_steer_angle = rospy.get_param('~max_steer_angle', 8.)
  min_speed = rospy.get_param('~min_speed', 0.0)  # added for yaw_controller taking default 0.0 for now

#+END_SRC

** preamble

   header, imports, and comments.
 #+NAME:preamble
 #+BEGIN_SRC python :noweb tangle :tangle
 #!/usr/bin/env python

 import rospy
 from std_msgs.msg import Bool
 from dbw_mkz_msgs.msg import ThrottleCmd, SteeringCmd, BrakeCmd, SteeringReport
 from geometry_msgs.msg import TwistStamped
 import math

 from twist_controller import TwistController

 '''
 You can build this node only after you have built (or partially built) the `waypoint_updater` node.

 You will subscribe to `/twist_cmd` message which provides the proposed linear and angular velocities.
 You can subscribe to any other message that you find important or refer to the document for list
 of messages subscribed to by the reference implementation of this node.

 One thing to keep in mind while building this node and the `twist_controller` class is the status
 of `dbw_enabled`. While in the simulator, its enabled all the time, in the real car, that will
 not be the case. This may cause your PID controller to accumulate error because the car could
 temporarily be driven by a human instead of your controller.

 We have provided two launch files with this node. Vehicle specific values (like vehicle_mass,
 wheel_base) etc should not be altered in these files.

 We have also provided some reference implementations for PID controller and other utility classes.
 You are free to use them or build your own.

 Once you have the proposed throttle, brake, and steer values, publish it on the various publishers
 that we have created in the `__init__` function.

 '''


 #+END_SRC

* Some other interesting message

** /tf Traffic Light (message)?

   Based on the abbrevation and the subscriber, it might be related to traffic light.

   Still don't quite understand the meaning of the fields.
   #+BEGIN_EXAMPLE
     rostopic info /tf
     Type: tf2_msgs/TFMessage

     Publishers: None

     Subscribers:
     ,* /tl_detector (http://yushen:43555/)

   #+END_EXAMPLE

   #+BEGIN_EXAMPLE
     rosmsg info tf2_msgs/TFMessage
     geometry_msgs/TransformStamped[] transforms
       std_msgs/Header header
         uint32 seq
         time stamp
         string frame_id
       string child_frame_id
       geometry_msgs/Transform transform
         geometry_msgs/Vector3 translation
           float64 x
           float64 y
           float64 z
         geometry_msgs/Quaternion rotation
           float64 x
           float64 y
           float64 z
           float64 w

   #+END_EXAMPLE

** /tf_static

** /traffic_waypoint


* Questions

* TODO TODO


- Study how to design TwistController
- Browse, annotate and absorb the related code
