#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

#+TITLE: Traffic Light Classifier (Inference)

This is the ingestion of the implementation from SJ and Sumanth's implementation.


* Code

Top Level

#+NAME:tl-classifier
#+BEGIN_SRC python :noweb tangle :tangle ./ros/src/tl_detector/light_classification/tl_classifier.py
  <<imports>>

  class TLClassifier(object):
      <<__init__>>
      <<get_classification>>
#+END_SRC


** imports

#+NAME:imports
#+BEGIN_SRC python :noweb tangle :tangle
  from styx_msgs.msg import TrafficLight
  import tensorflow as tf
  import numpy as np
  import rospy
#+END_SRC

** __init__

#+NAME:__init__
#+BEGIN_SRC python :noweb tangle :tangle
  def __init__(self):
      #TODO load classifier
      model_path = "../trained_model/frozen_inference_graph.pb"
      # the above path is at ros/trained_model parallel to src/tl_dectector
      self.detection_graph = tf.Graph()
      with self.detection_graph.as_default():
          od_graph_def = tf.GraphDef()
          with tf.gfile.GFile(model_path, 'rb') as fid:
              serialized_graph = fid.read()
              od_graph_def.ParseFromString(serialized_graph)
          # end of with tf.gfile.GFile(model_path, 'rb') as fid:
          tf.import_graph_def(od_graph_def, name='')
      # end of tf.import_graph_def(od_graph_def, name='')

      self.session = tf.Session(graph=self.detection_graph)
      self.image_tensor = self.detection_graph.get_tensor_by_name('image_tensor:0')
      self.detection_boxes = self.detection_graph.get_tensor_by_name('detection_boxes:0')
      self.detection_scores = self.detection_graph.get_tensor_by_name('detection_scores:0')
      self.detection_classes = self.detection_graph.get_tensor_by_name('detection_classes:0')
      self.num_detections = self.detection_graph.get_tensor_by_name('num_detections:0')

#+END_SRC

** get_classification

#+NAME:get_classification
#+BEGIN_SRC python :noweb tangle :tangle
  def get_classification(self, image):
      """Determines the color of the traffic light in the image
      Args:
          image (cv::Mat): image containing the traffic light
      Returns:
          int: ID of traffic light color (specified in styx_msgs/TrafficLight)
      """
      #TODO implement light color prediction
      image_expanded = np.expand_dims(image, axis=0)
      (boxes, scores, classes, num_det) = self.session.run(
          [self.detection_boxes, self.detection_scores,
           self.detection_classes, self.num_detections],
          feed_dict={'image_tensor:0': image_expanded})

      boxes = np.squeeze(boxes),
      classes = np.squeeze(classes).astype(np.int32),
      scores = np.squeeze(scores)

      # Print class based on best score
      idx = np.argmax(scores)
      rospy.loginfo("Maximum Score = %d"%(scores[idx]))
      if scores[idx] >= 0.9:
          rospy.loginfo("Traffic Light Color = %d"%(classes[idx]))
          return classes[idx]  # suggested by Aaron????
      # end of if scores[idx] >= 0.9

      return TrafficLight.UNKNOWN
#+END_SRC


* Sketches

#+BEGIN_SRC plantuml :file traffic-light-classification.png
@startuml
:TLDetector:get_light_state(light_index);
:TLClassifier:get_classification(image);
@enduml
#+END_SRC

#+RESULTS:
[[file:traffic-light-classification.png]]

#results:
